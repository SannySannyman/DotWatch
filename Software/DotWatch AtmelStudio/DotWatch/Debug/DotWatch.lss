
DotWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000bee  00000c82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000052  00800070  00800070  00000c92  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c92  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cf0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eff  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d8  00000000  00000000  00001d23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a1c  00000000  00000000  000026fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  00003118  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059c  00000000  00000000  000033a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009f2  00000000  00000000  00003944  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00004336  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	3e c1       	rjmp	.+636    	; 0x292 <__vector_10>
  16:	ba c1       	rjmp	.+884    	; 0x38c <__vector_11>
  18:	e5 c1       	rjmp	.+970    	; 0x3e4 <__vector_12>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee ee       	ldi	r30, 0xEE	; 238
  3a:	fb e0       	ldi	r31, 0x0B	; 11
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 37       	cpi	r26, 0x70	; 112
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a0 e7       	ldi	r26, 0x70	; 112
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 3c       	cpi	r26, 0xC2	; 194
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	43 d1       	rcall	.+646    	; 0x2e0 <main>
  5a:	c7 c5       	rjmp	.+2958   	; 0xbea <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <randGenDots>:

 volatile uint8_t displayBuff[DISPLAY_BUFF_LEN * 2] = {0, 0, 0, 0, 0, 0};


 uint16_t randGenDots(uint8_t nDots, uint8_t nMax)
 {
  5e:	8f 92       	push	r8
  60:	9f 92       	push	r9
  62:	af 92       	push	r10
  64:	bf 92       	push	r11
  66:	cf 92       	push	r12
  68:	df 92       	push	r13
  6a:	ef 92       	push	r14
  6c:	ff 92       	push	r15
  6e:	0f 93       	push	r16
  70:	1f 93       	push	r17
  72:	cf 93       	push	r28
  74:	df 93       	push	r29
  76:	c6 2f       	mov	r28, r22
  78:	a8 2e       	mov	r10, r24
  7a:	68 17       	cp	r22, r24
  7c:	08 f4       	brcc	.+2      	; 0x80 <randGenDots+0x22>
  7e:	a6 2e       	mov	r10, r22
	 if (nDots > nMax)
	 {
		 nDots = nMax;
	 }

	 if(nDots > nMax/2)
  80:	8c 2f       	mov	r24, r28
  82:	86 95       	lsr	r24
  84:	8a 15       	cp	r24, r10
  86:	08 f0       	brcs	.+2      	; 0x8a <randGenDots+0x2c>
  88:	50 c0       	rjmp	.+160    	; 0x12a <randGenDots+0xcc>
	 {
		 invertMode = TRUE;
		 nDots = nMax - nDots;
  8a:	8c 2f       	mov	r24, r28
  8c:	8a 19       	sub	r24, r10
  8e:	a8 2e       	mov	r10, r24
	 }

	 for (uint8_t i = 0; i < nDots; i++)
  90:	f1 f1       	breq	.+124    	; 0x10e <randGenDots+0xb0>
		 nDots = nMax;
	 }

	 if(nDots > nMax/2)
	 {
		 invertMode = TRUE;
  92:	88 24       	eor	r8, r8
  94:	83 94       	inc	r8
  96:	01 c0       	rjmp	.+2      	; 0x9a <randGenDots+0x3c>

 uint16_t randGenDots(uint8_t nDots, uint8_t nMax)
 {
	 uint16_t genBuff = 0;
	 uint8_t randN = 0;
	 uint8_t invertMode = FALSE;
  98:	81 2c       	mov	r8, r1
		 nDots = nMax;
	 }

	 if(nDots > nMax/2)
	 {
		 invertMode = TRUE;
  9a:	b1 2c       	mov	r11, r1
  9c:	00 e0       	ldi	r16, 0x00	; 0
  9e:	10 e0       	ldi	r17, 0x00	; 0
		 nDots = nMax - nDots;
	 }

	 for (uint8_t i = 0; i < nDots; i++)
	 {
		 randN = rand() % nMax;
  a0:	ec 2e       	mov	r14, r28
  a2:	f1 2c       	mov	r15, r1

		 for (uint8_t tryCnt = 0; tryCnt < nMax; tryCnt++)
		 {
			 if ((genBuff & (1<<randN)) == 0)
  a4:	cc 24       	eor	r12, r12
  a6:	c3 94       	inc	r12
  a8:	d1 2c       	mov	r13, r1
  aa:	91 2c       	mov	r9, r1
			 else
			 {
				 randN++;
				 if (randN >= nMax)
				 {
					 randN = 0;
  ac:	d9 2d       	mov	r29, r9
		 nDots = nMax - nDots;
	 }

	 for (uint8_t i = 0; i < nDots; i++)
	 {
		 randN = rand() % nMax;
  ae:	61 d2       	rcall	.+1218   	; 0x572 <rand>
  b0:	b7 01       	movw	r22, r14
  b2:	f0 d1       	rcall	.+992    	; 0x494 <__divmodhi4>
  b4:	98 2f       	mov	r25, r24

		 for (uint8_t tryCnt = 0; tryCnt < nMax; tryCnt++)
  b6:	cc 23       	and	r28, r28
  b8:	19 f1       	breq	.+70     	; 0x100 <randGenDots+0xa2>
		 {
			 if ((genBuff & (1<<randN)) == 0)
  ba:	a6 01       	movw	r20, r12
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <randGenDots+0x64>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	8a 95       	dec	r24
  c4:	e2 f7       	brpl	.-8      	; 0xbe <randGenDots+0x60>
  c6:	9a 01       	movw	r18, r20
  c8:	20 23       	and	r18, r16
  ca:	31 23       	and	r19, r17
  cc:	23 2b       	or	r18, r19
  ce:	71 f0       	breq	.+28     	; 0xec <randGenDots+0x8e>
  d0:	29 2d       	mov	r18, r9
  d2:	0f c0       	rjmp	.+30     	; 0xf2 <randGenDots+0x94>
  d4:	a6 01       	movw	r20, r12
  d6:	09 2e       	mov	r0, r25
  d8:	02 c0       	rjmp	.+4      	; 0xde <randGenDots+0x80>
  da:	44 0f       	add	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	0a 94       	dec	r0
  e0:	e2 f7       	brpl	.-8      	; 0xda <randGenDots+0x7c>
  e2:	ba 01       	movw	r22, r20
  e4:	60 23       	and	r22, r16
  e6:	71 23       	and	r23, r17
  e8:	67 2b       	or	r22, r23
  ea:	19 f4       	brne	.+6      	; 0xf2 <randGenDots+0x94>
			 {
				 genBuff |= 1<<randN;
  ec:	04 2b       	or	r16, r20
  ee:	15 2b       	or	r17, r21
				 break;
  f0:	07 c0       	rjmp	.+14     	; 0x100 <randGenDots+0xa2>
			 }
			 else
			 {
				 randN++;
  f2:	9f 5f       	subi	r25, 0xFF	; 255
				 if (randN >= nMax)
  f4:	9c 17       	cp	r25, r28
  f6:	08 f0       	brcs	.+2      	; 0xfa <randGenDots+0x9c>
				 {
					 randN = 0;
  f8:	9d 2f       	mov	r25, r29

	 for (uint8_t i = 0; i < nDots; i++)
	 {
		 randN = rand() % nMax;

		 for (uint8_t tryCnt = 0; tryCnt < nMax; tryCnt++)
  fa:	2f 5f       	subi	r18, 0xFF	; 255
  fc:	2c 13       	cpse	r18, r28
  fe:	ea cf       	rjmp	.-44     	; 0xd4 <randGenDots+0x76>
	 {
		 invertMode = TRUE;
		 nDots = nMax - nDots;
	 }

	 for (uint8_t i = 0; i < nDots; i++)
 100:	b3 94       	inc	r11
 102:	ba 14       	cp	r11, r10
 104:	a0 f2       	brcs	.-88     	; 0xae <randGenDots+0x50>
				 }
			 }
		 }
	 }

	 if (invertMode == TRUE)
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	88 12       	cpse	r8, r24
 10a:	13 c0       	rjmp	.+38     	; 0x132 <randGenDots+0xd4>
 10c:	02 c0       	rjmp	.+4      	; 0x112 <randGenDots+0xb4>
 volatile uint8_t displayBuff[DISPLAY_BUFF_LEN * 2] = {0, 0, 0, 0, 0, 0};


 uint16_t randGenDots(uint8_t nDots, uint8_t nMax)
 {
	 uint16_t genBuff = 0;
 10e:	00 e0       	ldi	r16, 0x00	; 0
 110:	10 e0       	ldi	r17, 0x00	; 0
		 }
	 }

	 if (invertMode == TRUE)
	 {
		 genBuff ^= ~(0xFFFF<<nMax);
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	9f ef       	ldi	r25, 0xFF	; 255
 116:	02 c0       	rjmp	.+4      	; 0x11c <randGenDots+0xbe>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	ca 95       	dec	r28
 11e:	e2 f7       	brpl	.-8      	; 0x118 <randGenDots+0xba>
 120:	80 95       	com	r24
 122:	90 95       	com	r25
 124:	08 27       	eor	r16, r24
 126:	19 27       	eor	r17, r25
 128:	04 c0       	rjmp	.+8      	; 0x132 <randGenDots+0xd4>
	 {
		 invertMode = TRUE;
		 nDots = nMax - nDots;
	 }

	 for (uint8_t i = 0; i < nDots; i++)
 12a:	a1 10       	cpse	r10, r1
 12c:	b5 cf       	rjmp	.-150    	; 0x98 <randGenDots+0x3a>
 volatile uint8_t displayBuff[DISPLAY_BUFF_LEN * 2] = {0, 0, 0, 0, 0, 0};


 uint16_t randGenDots(uint8_t nDots, uint8_t nMax)
 {
	 uint16_t genBuff = 0;
 12e:	00 e0       	ldi	r16, 0x00	; 0
 130:	10 e0       	ldi	r17, 0x00	; 0
	 {
		 genBuff ^= ~(0xFFFF<<nMax);
	 }

	 return genBuff;
 }
 132:	c8 01       	movw	r24, r16
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	ff 90       	pop	r15
 13e:	ef 90       	pop	r14
 140:	df 90       	pop	r13
 142:	cf 90       	pop	r12
 144:	bf 90       	pop	r11
 146:	af 90       	pop	r10
 148:	9f 90       	pop	r9
 14a:	8f 90       	pop	r8
 14c:	08 95       	ret

0000014e <genDotBuffers>:

 void genDotBuffers(uint8_t BCDhours, uint8_t BCDmins)
 {
 14e:	6f 92       	push	r6
 150:	7f 92       	push	r7
 152:	8f 92       	push	r8
 154:	9f 92       	push	r9
 156:	af 92       	push	r10
 158:	bf 92       	push	r11
 15a:	cf 92       	push	r12
 15c:	df 92       	push	r13
 15e:	ef 92       	push	r14
 160:	ff 92       	push	r15
 162:	0f 93       	push	r16
 164:	1f 93       	push	r17
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
 16e:	2c 97       	sbiw	r28, 0x0c	; 12
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	f8 94       	cli
 174:	de bf       	out	0x3e, r29	; 62
 176:	0f be       	out	0x3f, r0	; 63
 178:	cd bf       	out	0x3d, r28	; 61
 17a:	b8 2e       	mov	r11, r24
 17c:	16 2f       	mov	r17, r22
	 uint8_t displayTempBuff[DISPLAY_BUFF_LEN * 2];
	 uint16_t dotBuff[TIME_EN_N];
	 uint8_t temp = 0;
	 uint8_t buffCnt = 0;

	 dotBuff[TIME_MIN_O] = randGenDots((BCDmins & 0x0F), 9);
 17e:	69 e0       	ldi	r22, 0x09	; 9
 180:	81 2f       	mov	r24, r17
 182:	8f 70       	andi	r24, 0x0F	; 15
 184:	6c df       	rcall	.-296    	; 0x5e <randGenDots>
 186:	6c 01       	movw	r12, r24
	 dotBuff[TIME_MIN_T] = randGenDots((BCDmins >> 4), 6);
 188:	66 e0       	ldi	r22, 0x06	; 6
 18a:	81 2f       	mov	r24, r17
 18c:	82 95       	swap	r24
 18e:	8f 70       	andi	r24, 0x0F	; 15
 190:	66 df       	rcall	.-308    	; 0x5e <randGenDots>
 192:	7c 01       	movw	r14, r24
	 
	 dotBuff[TIME_HOUR_O] = randGenDots((BCDhours & 0x0F), 9);
 194:	69 e0       	ldi	r22, 0x09	; 9
 196:	8b 2d       	mov	r24, r11
 198:	8f 70       	andi	r24, 0x0F	; 15
 19a:	61 df       	rcall	.-318    	; 0x5e <randGenDots>
 19c:	8c 01       	movw	r16, r24
	 dotBuff[TIME_HOUR_T] = randGenDots((BCDhours >> 4), 6);
 19e:	66 e0       	ldi	r22, 0x06	; 6
 1a0:	8b 2d       	mov	r24, r11
 1a2:	82 95       	swap	r24
 1a4:	8f 70       	andi	r24, 0x0F	; 15
 1a6:	5b df       	rcall	.-330    	; 0x5e <randGenDots>
 1a8:	5c 01       	movw	r10, r24
 1aa:	fe 01       	movw	r30, r28
 1ac:	32 96       	adiw	r30, 0x02	; 2
 1ae:	40 e0       	ldi	r20, 0x00	; 0
 1b0:	50 e0       	ldi	r21, 0x00	; 0
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	62 e0       	ldi	r22, 0x02	; 2
 1b8:	70 e0       	ldi	r23, 0x00	; 0
	for (buffCnt = 0; buffCnt < DISPLAY_BUFF_LEN/2; buffCnt++)
	{
		temp = buffCnt * 2;

		displayTempBuff[temp] =
		(1<<(buffCnt+2)) |
 1ba:	88 24       	eor	r8, r8
 1bc:	83 94       	inc	r8
 1be:	91 2c       	mov	r9, r1
 1c0:	df 01       	movw	r26, r30
 1c2:	11 97       	sbiw	r26, 0x01	; 1
		((dotBuff[TIME_HOUR_T] >> (DISPLAY_HOUR_T_ROW_WIDTH * buffCnt))	&
 1c4:	35 01       	movw	r6, r10
 1c6:	02 2e       	mov	r0, r18
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <genDotBuffers+0x80>
 1ca:	76 94       	lsr	r7
 1cc:	67 94       	ror	r6
 1ce:	0a 94       	dec	r0
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <genDotBuffers+0x7c>

	for (buffCnt = 0; buffCnt < DISPLAY_BUFF_LEN/2; buffCnt++)
	{
		temp = buffCnt * 2;

		displayTempBuff[temp] =
 1d2:	86 2d       	mov	r24, r6
 1d4:	83 70       	andi	r24, 0x03	; 3
 1d6:	78 2e       	mov	r7, r24
		(1<<(buffCnt+2)) |
 1d8:	c4 01       	movw	r24, r8
 1da:	06 2e       	mov	r0, r22
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <genDotBuffers+0x94>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	0a 94       	dec	r0
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <genDotBuffers+0x90>

	for (buffCnt = 0; buffCnt < DISPLAY_BUFF_LEN/2; buffCnt++)
	{
		temp = buffCnt * 2;

		displayTempBuff[temp] =
 1e6:	87 29       	or	r24, r7
 1e8:	8c 93       	st	X, r24
		displayTempBuff[temp+1] =
		(((dotBuff[TIME_HOUR_O] >> (DISPLAY_HOUR_O_ROW_WIDTH * buffCnt))	&
		DISPLAY_HOUR_O_N_MASK)	<< DISPLAY_HOUR_O_COLUMN_START)		|
		(((dotBuff[TIME_MIN_T] >> (DISPLAY_MIN_T_ROW_WIDTH * buffCnt))		&
		DISPLAY_MIN_T_N_MASK)	<< DISPLAY_MIN_T_COLUMN_START)		|
		(((dotBuff[TIME_MIN_O] >> (DISPLAY_MIN_O_ROW_WIDTH * buffCnt))		&
 1ea:	c6 01       	movw	r24, r12
 1ec:	04 2e       	mov	r0, r20
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <genDotBuffers+0xa6>
 1f0:	96 95       	lsr	r25
 1f2:	87 95       	ror	r24
 1f4:	0a 94       	dec	r0
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <genDotBuffers+0xa2>
		displayTempBuff[temp] =
		(1<<(buffCnt+2)) |
		((dotBuff[TIME_HOUR_T] >> (DISPLAY_HOUR_T_ROW_WIDTH * buffCnt))	&
		DISPLAY_HOUR_T_N_MASK);

		displayTempBuff[temp+1] =
 1f8:	a8 2f       	mov	r26, r24
 1fa:	a7 70       	andi	r26, 0x07	; 7
		(((dotBuff[TIME_HOUR_O] >> (DISPLAY_HOUR_O_ROW_WIDTH * buffCnt))	&
 1fc:	c8 01       	movw	r24, r16
 1fe:	04 2e       	mov	r0, r20
 200:	02 c0       	rjmp	.+4      	; 0x206 <genDotBuffers+0xb8>
 202:	96 95       	lsr	r25
 204:	87 95       	ror	r24
 206:	0a 94       	dec	r0
 208:	e2 f7       	brpl	.-8      	; 0x202 <genDotBuffers+0xb4>
		displayTempBuff[temp] =
		(1<<(buffCnt+2)) |
		((dotBuff[TIME_HOUR_T] >> (DISPLAY_HOUR_T_ROW_WIDTH * buffCnt))	&
		DISPLAY_HOUR_T_N_MASK);

		displayTempBuff[temp+1] =
 20a:	98 2f       	mov	r25, r24
 20c:	92 95       	swap	r25
 20e:	99 0f       	add	r25, r25
 210:	90 7e       	andi	r25, 0xE0	; 224
 212:	a9 2b       	or	r26, r25
		(((dotBuff[TIME_HOUR_O] >> (DISPLAY_HOUR_O_ROW_WIDTH * buffCnt))	&
		DISPLAY_HOUR_O_N_MASK)	<< DISPLAY_HOUR_O_COLUMN_START)		|
		(((dotBuff[TIME_MIN_T] >> (DISPLAY_MIN_T_ROW_WIDTH * buffCnt))		&
 214:	c7 01       	movw	r24, r14
 216:	02 2e       	mov	r0, r18
 218:	02 c0       	rjmp	.+4      	; 0x21e <genDotBuffers+0xd0>
 21a:	96 95       	lsr	r25
 21c:	87 95       	ror	r24
 21e:	0a 94       	dec	r0
 220:	e2 f7       	brpl	.-8      	; 0x21a <genDotBuffers+0xcc>
		displayTempBuff[temp] =
		(1<<(buffCnt+2)) |
		((dotBuff[TIME_HOUR_T] >> (DISPLAY_HOUR_T_ROW_WIDTH * buffCnt))	&
		DISPLAY_HOUR_T_N_MASK);

		displayTempBuff[temp+1] =
 222:	98 2f       	mov	r25, r24
 224:	93 70       	andi	r25, 0x03	; 3
 226:	99 0f       	add	r25, r25
 228:	99 0f       	add	r25, r25
 22a:	99 0f       	add	r25, r25
 22c:	8a 2f       	mov	r24, r26
 22e:	89 2b       	or	r24, r25
 230:	80 83       	st	Z, r24
 232:	6f 5f       	subi	r22, 0xFF	; 255
 234:	7f 4f       	sbci	r23, 0xFF	; 255
 236:	2e 5f       	subi	r18, 0xFE	; 254
 238:	3f 4f       	sbci	r19, 0xFF	; 255
 23a:	4d 5f       	subi	r20, 0xFD	; 253
 23c:	5f 4f       	sbci	r21, 0xFF	; 255
 23e:	32 96       	adiw	r30, 0x02	; 2
	 dotBuff[TIME_MIN_T] = randGenDots((BCDmins >> 4), 6);
	 
	 dotBuff[TIME_HOUR_O] = randGenDots((BCDhours & 0x0F), 9);
	 dotBuff[TIME_HOUR_T] = randGenDots((BCDhours >> 4), 6);

	for (buffCnt = 0; buffCnt < DISPLAY_BUFF_LEN/2; buffCnt++)
 240:	26 30       	cpi	r18, 0x06	; 6
 242:	31 05       	cpc	r19, r1
 244:	09 f0       	breq	.+2      	; 0x248 <genDotBuffers+0xfa>
 246:	bc cf       	rjmp	.-136    	; 0x1c0 <genDotBuffers+0x72>
		DISPLAY_MIN_T_N_MASK)	<< DISPLAY_MIN_T_COLUMN_START)		|
		(((dotBuff[TIME_MIN_O] >> (DISPLAY_MIN_O_ROW_WIDTH * buffCnt))		&
		DISPLAY_MIN_O_N_MASK)	<< DISPLAY_MIN_O_COLUMN_START) ;
	}

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 248:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 24a:	f8 94       	cli
 24c:	fe 01       	movw	r30, r28
 24e:	31 96       	adiw	r30, 0x01	; 1
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	90 e0       	ldi	r25, 0x00	; 0
	{
		for(buffCnt = 0; buffCnt < DISPLAY_BUFF_LEN; buffCnt++)
		{
			displayBuff[buffCnt] = displayTempBuff[buffCnt];
 254:	21 91       	ld	r18, Z+
 256:	dc 01       	movw	r26, r24
 258:	a0 59       	subi	r26, 0x90	; 144
 25a:	bf 4f       	sbci	r27, 0xFF	; 255
 25c:	2c 93       	st	X, r18
 25e:	01 96       	adiw	r24, 0x01	; 1
		DISPLAY_MIN_O_N_MASK)	<< DISPLAY_MIN_O_COLUMN_START) ;
	}

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		for(buffCnt = 0; buffCnt < DISPLAY_BUFF_LEN; buffCnt++)
 260:	86 30       	cpi	r24, 0x06	; 6
 262:	91 05       	cpc	r25, r1
 264:	b9 f7       	brne	.-18     	; 0x254 <genDotBuffers+0x106>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 266:	3f bf       	out	0x3f, r19	; 63
		{
			displayBuff[buffCnt] = displayTempBuff[buffCnt];
		}
	}
 }
 268:	2c 96       	adiw	r28, 0x0c	; 12
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	f8 94       	cli
 26e:	de bf       	out	0x3e, r29	; 62
 270:	0f be       	out	0x3f, r0	; 63
 272:	cd bf       	out	0x3d, r28	; 61
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	ff 90       	pop	r15
 27e:	ef 90       	pop	r14
 280:	df 90       	pop	r13
 282:	cf 90       	pop	r12
 284:	bf 90       	pop	r11
 286:	af 90       	pop	r10
 288:	9f 90       	pop	r9
 28a:	8f 90       	pop	r8
 28c:	7f 90       	pop	r7
 28e:	6f 90       	pop	r6
 290:	08 95       	ret

00000292 <__vector_10>:
#include "uart.h"
#include "i2cmaster.h"
#include "dot_display.h"

ISR(SPI_STC_vect)
{
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	8f 93       	push	r24
 29e:	ef 93       	push	r30
 2a0:	ff 93       	push	r31
	static uint8_t cnt = 0;

	SPDR = displayBuff[cnt];
 2a2:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <cnt.2198>
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	e0 59       	subi	r30, 0x90	; 144
 2aa:	ff 4f       	sbci	r31, 0xFF	; 255
 2ac:	80 81       	ld	r24, Z
 2ae:	8f b9       	out	0x0f, r24	; 15

	if (cnt%2 == 0)
 2b0:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <cnt.2198>
 2b4:	80 fd       	sbrc	r24, 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <__vector_10+0x2a>
	{
		set_bit(D_UPD_PORT, D_UPD_PIN);
 2b8:	c2 9a       	sbi	0x18, 2	; 24
		unset_bit(D_UPD_PORT, D_UPD_PIN);
 2ba:	c2 98       	cbi	0x18, 2	; 24
	}

	cnt++;
 2bc:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <cnt.2198>
 2c0:	8f 5f       	subi	r24, 0xFF	; 255
	if (cnt >= DISPLAY_BUFF_LEN)
 2c2:	86 30       	cpi	r24, 0x06	; 6
 2c4:	18 f4       	brcc	.+6      	; 0x2cc <__vector_10+0x3a>
	{
		set_bit(D_UPD_PORT, D_UPD_PIN);
		unset_bit(D_UPD_PORT, D_UPD_PIN);
	}

	cnt++;
 2c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <cnt.2198>
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <__vector_10+0x3e>
	if (cnt >= DISPLAY_BUFF_LEN)
	{
		cnt = 0;
 2cc:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <cnt.2198>
	}
}
 2d0:	ff 91       	pop	r31
 2d2:	ef 91       	pop	r30
 2d4:	8f 91       	pop	r24
 2d6:	0f 90       	pop	r0
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	0f 90       	pop	r0
 2dc:	1f 90       	pop	r1
 2de:	18 95       	reti

000002e0 <main>:

int main(void)
{	
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	cd b7       	in	r28, 0x3d	; 61
 2e6:	de b7       	in	r29, 0x3e	; 62
 2e8:	60 97       	sbiw	r28, 0x10	; 16
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	f8 94       	cli
 2ee:	de bf       	out	0x3e, r29	; 62
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	cd bf       	out	0x3d, r28	; 61
	#define TEMP_BUFF_SIZE 16
	char tempBuff[TEMP_BUFF_SIZE];
	
	set_bit(D_UPD_DDR, D_UPD_PIN);
 2f4:	ba 9a       	sbi	0x17, 2	; 23
	set_bit(D_CLK_DDR, D_CLK_PIN);
 2f6:	bd 9a       	sbi	0x17, 5	; 23
	set_bit(D_DATA_DDR, D_DATA_PIN);
 2f8:	bb 9a       	sbi	0x17, 3	; 23

	//OCR2 = 0x0F;
	//set_bit2(TCCR2, WGM21, CS22); //CTC, clk/64
	//set_bit(TIMSK, OCIE2);			//compare match interrupt

	set_bit5(SPCR, SPIE, SPE, MSTR, SPR1, SPR0);	//SPI interrupt, SPI en, master, clk/128
 2fa:	8d b1       	in	r24, 0x0d	; 13
 2fc:	83 6d       	ori	r24, 0xD3	; 211
 2fe:	8d b9       	out	0x0d, r24	; 13

	SPDR = 0x00;
 300:	1f b8       	out	0x0f, r1	; 15

	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
 302:	83 e3       	ldi	r24, 0x33	; 51
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	93 d0       	rcall	.+294    	; 0x42e <uart_init>
	i2c_init();
 308:	3d d0       	rcall	.+122    	; 0x384 <i2c_init>

	sei();
 30a:	78 94       	sei

    while (1) 
    {
		
		genDotBuffers(0x21, 0x37);
 30c:	71 2c       	mov	r7, r1
 30e:	81 2c       	mov	r8, r1

		for(uint8_t cnt = 0; cnt< DISPLAY_BUFF_LEN; cnt++)
		{
			snprintf(tempBuff, TEMP_BUFF_SIZE, "%.2x ", displayBuff[cnt]);
 310:	0f 2e       	mov	r0, r31
 312:	f4 e6       	ldi	r31, 0x64	; 100
 314:	ef 2e       	mov	r14, r31
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	ff 2e       	mov	r15, r31
 31a:	f0 2d       	mov	r31, r0
 31c:	68 94       	set
 31e:	99 24       	eor	r9, r9
 320:	94 f8       	bld	r9, 4
 322:	ce 01       	movw	r24, r28
 324:	01 96       	adiw	r24, 0x01	; 1
 326:	6c 01       	movw	r12, r24
 328:	a8 2e       	mov	r10, r24
 32a:	bd 2c       	mov	r11, r13
	sei();

    while (1) 
    {
		
		genDotBuffers(0x21, 0x37);
 32c:	67 e3       	ldi	r22, 0x37	; 55
 32e:	81 e2       	ldi	r24, 0x21	; 33
 330:	0e df       	rcall	.-484    	; 0x14e <genDotBuffers>
 332:	07 2d       	mov	r16, r7
 334:	18 2d       	mov	r17, r8

		for(uint8_t cnt = 0; cnt< DISPLAY_BUFF_LEN; cnt++)
		{
			snprintf(tempBuff, TEMP_BUFF_SIZE, "%.2x ", displayBuff[cnt]);
 336:	f8 01       	movw	r30, r16
 338:	e0 59       	subi	r30, 0x90	; 144
 33a:	ff 4f       	sbci	r31, 0xFF	; 255
 33c:	20 81       	ld	r18, Z
 33e:	1f 92       	push	r1
 340:	2f 93       	push	r18
 342:	ff 92       	push	r15
 344:	ef 92       	push	r14
 346:	1f 92       	push	r1
 348:	9f 92       	push	r9
 34a:	df 92       	push	r13
 34c:	cf 92       	push	r12
 34e:	20 d1       	rcall	.+576    	; 0x590 <snprintf>
			uart_puts(tempBuff);
 350:	8a 2d       	mov	r24, r10
 352:	9b 2d       	mov	r25, r11
 354:	91 d0       	rcall	.+290    	; 0x478 <uart_puts>
 356:	0f 5f       	subi	r16, 0xFF	; 255
 358:	1f 4f       	sbci	r17, 0xFF	; 255
    while (1) 
    {
		
		genDotBuffers(0x21, 0x37);

		for(uint8_t cnt = 0; cnt< DISPLAY_BUFF_LEN; cnt++)
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	f8 94       	cli
 35e:	de bf       	out	0x3e, r29	; 62
 360:	0f be       	out	0x3f, r0	; 63
 362:	cd bf       	out	0x3d, r28	; 61
 364:	06 30       	cpi	r16, 0x06	; 6
 366:	11 05       	cpc	r17, r1
 368:	31 f7       	brne	.-52     	; 0x336 <main+0x56>
		{
			snprintf(tempBuff, TEMP_BUFF_SIZE, "%.2x ", displayBuff[cnt]);
			uart_puts(tempBuff);
		}

		uart_puts("\n\r\n\r");
 36a:	8a e6       	ldi	r24, 0x6A	; 106
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	84 d0       	rcall	.+264    	; 0x478 <uart_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 370:	9f ef       	ldi	r25, 0xFF	; 255
 372:	21 e1       	ldi	r18, 0x11	; 17
 374:	8a e7       	ldi	r24, 0x7A	; 122
 376:	91 50       	subi	r25, 0x01	; 1
 378:	20 40       	sbci	r18, 0x00	; 0
 37a:	80 40       	sbci	r24, 0x00	; 0
 37c:	e1 f7       	brne	.-8      	; 0x376 <main+0x96>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <main+0xa0>
 380:	00 00       	nop
 382:	d4 cf       	rjmp	.-88     	; 0x32c <main+0x4c>

00000384 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
 384:	11 b8       	out	0x01, r1	; 1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 386:	80 e2       	ldi	r24, 0x20	; 32
 388:	80 b9       	out	0x00, r24	; 0
 38a:	08 95       	ret

0000038c <__vector_11>:
    UART_RxTail = tmptail; 
    
    UART_LastRxError = 0;
    return (lastRxError << 8) + data;

}/* uart_getc */
 38c:	1f 92       	push	r1
 38e:	0f 92       	push	r0
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	0f 92       	push	r0
 394:	11 24       	eor	r1, r1
 396:	2f 93       	push	r18
 398:	8f 93       	push	r24
 39a:	9f 93       	push	r25
 39c:	ef 93       	push	r30
 39e:	ff 93       	push	r31
 3a0:	8b b1       	in	r24, 0x0b	; 11
 3a2:	2c b1       	in	r18, 0x0c	; 12
 3a4:	8c 71       	andi	r24, 0x1C	; 28
 3a6:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <UART_RxHead>
 3aa:	ef 5f       	subi	r30, 0xFF	; 255
 3ac:	ef 71       	andi	r30, 0x1F	; 31
 3ae:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <UART_RxTail>
 3b2:	e9 17       	cp	r30, r25
 3b4:	39 f0       	breq	.+14     	; 0x3c4 <__vector_11+0x38>
 3b6:	e0 93 7f 00 	sts	0x007F, r30	; 0x80007f <UART_RxHead>
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	ee 57       	subi	r30, 0x7E	; 126
 3be:	ff 4f       	sbci	r31, 0xFF	; 255
 3c0:	20 83       	st	Z, r18
 3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <__vector_11+0x3a>
 3c4:	82 e0       	ldi	r24, 0x02	; 2
 3c6:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <UART_LastRxError>
 3ca:	89 2b       	or	r24, r25
 3cc:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <UART_LastRxError>
 3d0:	ff 91       	pop	r31
 3d2:	ef 91       	pop	r30
 3d4:	9f 91       	pop	r25
 3d6:	8f 91       	pop	r24
 3d8:	2f 91       	pop	r18
 3da:	0f 90       	pop	r0
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	0f 90       	pop	r0
 3e0:	1f 90       	pop	r1
 3e2:	18 95       	reti

000003e4 <__vector_12>:
 3e4:	1f 92       	push	r1
 3e6:	0f 92       	push	r0
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	0f 92       	push	r0
 3ec:	11 24       	eor	r1, r1
 3ee:	8f 93       	push	r24
 3f0:	9f 93       	push	r25
 3f2:	ef 93       	push	r30
 3f4:	ff 93       	push	r31
 3f6:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <UART_TxHead>
 3fa:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <UART_TxTail>
 3fe:	98 17       	cp	r25, r24
 400:	61 f0       	breq	.+24     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 402:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <UART_TxTail>
 406:	ef 5f       	subi	r30, 0xFF	; 255
 408:	ef 71       	andi	r30, 0x1F	; 31
 40a:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <UART_TxTail>
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	ee 55       	subi	r30, 0x5E	; 94
 412:	ff 4f       	sbci	r31, 0xFF	; 255
 414:	80 81       	ld	r24, Z
 416:	8c b9       	out	0x0c, r24	; 12
 418:	01 c0       	rjmp	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41a:	55 98       	cbi	0x0a, 5	; 10
 41c:	ff 91       	pop	r31
 41e:	ef 91       	pop	r30
 420:	9f 91       	pop	r25
 422:	8f 91       	pop	r24
 424:	0f 90       	pop	r0
 426:	0f be       	out	0x3f, r0	; 63
 428:	0f 90       	pop	r0
 42a:	1f 90       	pop	r1
 42c:	18 95       	reti

0000042e <uart_init>:
 42e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <UART_TxHead>
 432:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <UART_TxTail>
 436:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <UART_RxHead>
 43a:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <UART_RxTail>
 43e:	99 23       	and	r25, r25
 440:	14 f4       	brge	.+4      	; 0x446 <uart_init+0x18>
 442:	22 e0       	ldi	r18, 0x02	; 2
 444:	2b b9       	out	0x0b, r18	; 11
 446:	90 78       	andi	r25, 0x80	; 128
 448:	90 bd       	out	0x20, r25	; 32
 44a:	89 b9       	out	0x09, r24	; 9
 44c:	88 e9       	ldi	r24, 0x98	; 152
 44e:	8a b9       	out	0x0a, r24	; 10
 450:	86 e8       	ldi	r24, 0x86	; 134
 452:	80 bd       	out	0x20, r24	; 32
 454:	08 95       	ret

00000456 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 456:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <UART_TxHead>
 45a:	2f 5f       	subi	r18, 0xFF	; 255
 45c:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 45e:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <UART_TxTail>
 462:	29 17       	cp	r18, r25
 464:	e1 f3       	breq	.-8      	; 0x45e <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 466:	e2 2f       	mov	r30, r18
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	ee 55       	subi	r30, 0x5E	; 94
 46c:	ff 4f       	sbci	r31, 0xFF	; 255
 46e:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 470:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 474:	55 9a       	sbi	0x0a, 5	; 10
 476:	08 95       	ret

00000478 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
 47c:	ec 01       	movw	r28, r24
    while (*s) 
 47e:	88 81       	ld	r24, Y
 480:	88 23       	and	r24, r24
 482:	29 f0       	breq	.+10     	; 0x48e <uart_puts+0x16>
 484:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
 486:	e7 df       	rcall	.-50     	; 0x456 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 488:	89 91       	ld	r24, Y+
 48a:	81 11       	cpse	r24, r1
 48c:	fc cf       	rjmp	.-8      	; 0x486 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	08 95       	ret

00000494 <__divmodhi4>:
 494:	97 fb       	bst	r25, 7
 496:	07 2e       	mov	r0, r23
 498:	16 f4       	brtc	.+4      	; 0x49e <__divmodhi4+0xa>
 49a:	00 94       	com	r0
 49c:	06 d0       	rcall	.+12     	; 0x4aa <__divmodhi4_neg1>
 49e:	77 fd       	sbrc	r23, 7
 4a0:	08 d0       	rcall	.+16     	; 0x4b2 <__divmodhi4_neg2>
 4a2:	0b d0       	rcall	.+22     	; 0x4ba <__udivmodhi4>
 4a4:	07 fc       	sbrc	r0, 7
 4a6:	05 d0       	rcall	.+10     	; 0x4b2 <__divmodhi4_neg2>
 4a8:	3e f4       	brtc	.+14     	; 0x4b8 <__divmodhi4_exit>

000004aa <__divmodhi4_neg1>:
 4aa:	90 95       	com	r25
 4ac:	81 95       	neg	r24
 4ae:	9f 4f       	sbci	r25, 0xFF	; 255
 4b0:	08 95       	ret

000004b2 <__divmodhi4_neg2>:
 4b2:	70 95       	com	r23
 4b4:	61 95       	neg	r22
 4b6:	7f 4f       	sbci	r23, 0xFF	; 255

000004b8 <__divmodhi4_exit>:
 4b8:	08 95       	ret

000004ba <__udivmodhi4>:
 4ba:	aa 1b       	sub	r26, r26
 4bc:	bb 1b       	sub	r27, r27
 4be:	51 e1       	ldi	r21, 0x11	; 17
 4c0:	07 c0       	rjmp	.+14     	; 0x4d0 <__udivmodhi4_ep>

000004c2 <__udivmodhi4_loop>:
 4c2:	aa 1f       	adc	r26, r26
 4c4:	bb 1f       	adc	r27, r27
 4c6:	a6 17       	cp	r26, r22
 4c8:	b7 07       	cpc	r27, r23
 4ca:	10 f0       	brcs	.+4      	; 0x4d0 <__udivmodhi4_ep>
 4cc:	a6 1b       	sub	r26, r22
 4ce:	b7 0b       	sbc	r27, r23

000004d0 <__udivmodhi4_ep>:
 4d0:	88 1f       	adc	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	5a 95       	dec	r21
 4d6:	a9 f7       	brne	.-22     	; 0x4c2 <__udivmodhi4_loop>
 4d8:	80 95       	com	r24
 4da:	90 95       	com	r25
 4dc:	bc 01       	movw	r22, r24
 4de:	cd 01       	movw	r24, r26
 4e0:	08 95       	ret

000004e2 <do_rand>:
 4e2:	8f 92       	push	r8
 4e4:	9f 92       	push	r9
 4e6:	af 92       	push	r10
 4e8:	bf 92       	push	r11
 4ea:	cf 92       	push	r12
 4ec:	df 92       	push	r13
 4ee:	ef 92       	push	r14
 4f0:	ff 92       	push	r15
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
 4f6:	ec 01       	movw	r28, r24
 4f8:	68 81       	ld	r22, Y
 4fa:	79 81       	ldd	r23, Y+1	; 0x01
 4fc:	8a 81       	ldd	r24, Y+2	; 0x02
 4fe:	9b 81       	ldd	r25, Y+3	; 0x03
 500:	61 15       	cp	r22, r1
 502:	71 05       	cpc	r23, r1
 504:	81 05       	cpc	r24, r1
 506:	91 05       	cpc	r25, r1
 508:	21 f4       	brne	.+8      	; 0x512 <do_rand+0x30>
 50a:	64 e2       	ldi	r22, 0x24	; 36
 50c:	79 ed       	ldi	r23, 0xD9	; 217
 50e:	8b e5       	ldi	r24, 0x5B	; 91
 510:	97 e0       	ldi	r25, 0x07	; 7
 512:	2d e1       	ldi	r18, 0x1D	; 29
 514:	33 ef       	ldi	r19, 0xF3	; 243
 516:	41 e0       	ldi	r20, 0x01	; 1
 518:	50 e0       	ldi	r21, 0x00	; 0
 51a:	d6 d2       	rcall	.+1452   	; 0xac8 <__divmodsi4>
 51c:	49 01       	movw	r8, r18
 51e:	5a 01       	movw	r10, r20
 520:	9b 01       	movw	r18, r22
 522:	ac 01       	movw	r20, r24
 524:	a7 ea       	ldi	r26, 0xA7	; 167
 526:	b1 e4       	ldi	r27, 0x41	; 65
 528:	eb d2       	rcall	.+1494   	; 0xb00 <__muluhisi3>
 52a:	6b 01       	movw	r12, r22
 52c:	7c 01       	movw	r14, r24
 52e:	ac ee       	ldi	r26, 0xEC	; 236
 530:	b4 ef       	ldi	r27, 0xF4	; 244
 532:	a5 01       	movw	r20, r10
 534:	94 01       	movw	r18, r8
 536:	f0 d2       	rcall	.+1504   	; 0xb18 <__mulohisi3>
 538:	dc 01       	movw	r26, r24
 53a:	cb 01       	movw	r24, r22
 53c:	8c 0d       	add	r24, r12
 53e:	9d 1d       	adc	r25, r13
 540:	ae 1d       	adc	r26, r14
 542:	bf 1d       	adc	r27, r15
 544:	b7 ff       	sbrs	r27, 7
 546:	03 c0       	rjmp	.+6      	; 0x54e <do_rand+0x6c>
 548:	01 97       	sbiw	r24, 0x01	; 1
 54a:	a1 09       	sbc	r26, r1
 54c:	b0 48       	sbci	r27, 0x80	; 128
 54e:	88 83       	st	Y, r24
 550:	99 83       	std	Y+1, r25	; 0x01
 552:	aa 83       	std	Y+2, r26	; 0x02
 554:	bb 83       	std	Y+3, r27	; 0x03
 556:	9f 77       	andi	r25, 0x7F	; 127
 558:	df 91       	pop	r29
 55a:	cf 91       	pop	r28
 55c:	ff 90       	pop	r15
 55e:	ef 90       	pop	r14
 560:	df 90       	pop	r13
 562:	cf 90       	pop	r12
 564:	bf 90       	pop	r11
 566:	af 90       	pop	r10
 568:	9f 90       	pop	r9
 56a:	8f 90       	pop	r8
 56c:	08 95       	ret

0000056e <rand_r>:
 56e:	b9 df       	rcall	.-142    	; 0x4e2 <do_rand>
 570:	08 95       	ret

00000572 <rand>:
 572:	80 e6       	ldi	r24, 0x60	; 96
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	b5 df       	rcall	.-150    	; 0x4e2 <do_rand>
 578:	08 95       	ret

0000057a <srand>:
 57a:	a0 e0       	ldi	r26, 0x00	; 0
 57c:	b0 e0       	ldi	r27, 0x00	; 0
 57e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 582:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 586:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_start+0x2>
 58a:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_start+0x3>
 58e:	08 95       	ret

00000590 <snprintf>:
 590:	ae e0       	ldi	r26, 0x0E	; 14
 592:	b0 e0       	ldi	r27, 0x00	; 0
 594:	ed ec       	ldi	r30, 0xCD	; 205
 596:	f2 e0       	ldi	r31, 0x02	; 2
 598:	d1 c2       	rjmp	.+1442   	; 0xb3c <__prologue_saves__+0x1c>
 59a:	0d 89       	ldd	r16, Y+21	; 0x15
 59c:	1e 89       	ldd	r17, Y+22	; 0x16
 59e:	8f 89       	ldd	r24, Y+23	; 0x17
 5a0:	98 8d       	ldd	r25, Y+24	; 0x18
 5a2:	26 e0       	ldi	r18, 0x06	; 6
 5a4:	2c 83       	std	Y+4, r18	; 0x04
 5a6:	1a 83       	std	Y+2, r17	; 0x02
 5a8:	09 83       	std	Y+1, r16	; 0x01
 5aa:	97 ff       	sbrs	r25, 7
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <snprintf+0x22>
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	90 e8       	ldi	r25, 0x80	; 128
 5b2:	01 97       	sbiw	r24, 0x01	; 1
 5b4:	9e 83       	std	Y+6, r25	; 0x06
 5b6:	8d 83       	std	Y+5, r24	; 0x05
 5b8:	ae 01       	movw	r20, r28
 5ba:	45 5e       	subi	r20, 0xE5	; 229
 5bc:	5f 4f       	sbci	r21, 0xFF	; 255
 5be:	69 8d       	ldd	r22, Y+25	; 0x19
 5c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
 5c2:	ce 01       	movw	r24, r28
 5c4:	01 96       	adiw	r24, 0x01	; 1
 5c6:	11 d0       	rcall	.+34     	; 0x5ea <vfprintf>
 5c8:	4d 81       	ldd	r20, Y+5	; 0x05
 5ca:	5e 81       	ldd	r21, Y+6	; 0x06
 5cc:	57 fd       	sbrc	r21, 7
 5ce:	0a c0       	rjmp	.+20     	; 0x5e4 <snprintf+0x54>
 5d0:	2f 81       	ldd	r18, Y+7	; 0x07
 5d2:	38 85       	ldd	r19, Y+8	; 0x08
 5d4:	42 17       	cp	r20, r18
 5d6:	53 07       	cpc	r21, r19
 5d8:	0c f4       	brge	.+2      	; 0x5dc <snprintf+0x4c>
 5da:	9a 01       	movw	r18, r20
 5dc:	f8 01       	movw	r30, r16
 5de:	e2 0f       	add	r30, r18
 5e0:	f3 1f       	adc	r31, r19
 5e2:	10 82       	st	Z, r1
 5e4:	2e 96       	adiw	r28, 0x0e	; 14
 5e6:	e4 e0       	ldi	r30, 0x04	; 4
 5e8:	c5 c2       	rjmp	.+1418   	; 0xb74 <__epilogue_restores__+0x1c>

000005ea <vfprintf>:
 5ea:	ac e0       	ldi	r26, 0x0C	; 12
 5ec:	b0 e0       	ldi	r27, 0x00	; 0
 5ee:	ea ef       	ldi	r30, 0xFA	; 250
 5f0:	f2 e0       	ldi	r31, 0x02	; 2
 5f2:	96 c2       	rjmp	.+1324   	; 0xb20 <__prologue_saves__>
 5f4:	7c 01       	movw	r14, r24
 5f6:	6b 01       	movw	r12, r22
 5f8:	8a 01       	movw	r16, r20
 5fa:	fc 01       	movw	r30, r24
 5fc:	17 82       	std	Z+7, r1	; 0x07
 5fe:	16 82       	std	Z+6, r1	; 0x06
 600:	83 81       	ldd	r24, Z+3	; 0x03
 602:	81 ff       	sbrs	r24, 1
 604:	b0 c1       	rjmp	.+864    	; 0x966 <vfprintf+0x37c>
 606:	ce 01       	movw	r24, r28
 608:	01 96       	adiw	r24, 0x01	; 1
 60a:	4c 01       	movw	r8, r24
 60c:	f7 01       	movw	r30, r14
 60e:	93 81       	ldd	r25, Z+3	; 0x03
 610:	f6 01       	movw	r30, r12
 612:	93 fd       	sbrc	r25, 3
 614:	85 91       	lpm	r24, Z+
 616:	93 ff       	sbrs	r25, 3
 618:	81 91       	ld	r24, Z+
 61a:	6f 01       	movw	r12, r30
 61c:	88 23       	and	r24, r24
 61e:	09 f4       	brne	.+2      	; 0x622 <vfprintf+0x38>
 620:	9e c1       	rjmp	.+828    	; 0x95e <vfprintf+0x374>
 622:	85 32       	cpi	r24, 0x25	; 37
 624:	39 f4       	brne	.+14     	; 0x634 <vfprintf+0x4a>
 626:	93 fd       	sbrc	r25, 3
 628:	85 91       	lpm	r24, Z+
 62a:	93 ff       	sbrs	r25, 3
 62c:	81 91       	ld	r24, Z+
 62e:	6f 01       	movw	r12, r30
 630:	85 32       	cpi	r24, 0x25	; 37
 632:	21 f4       	brne	.+8      	; 0x63c <vfprintf+0x52>
 634:	b7 01       	movw	r22, r14
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	b1 d1       	rcall	.+866    	; 0x99c <fputc>
 63a:	e8 cf       	rjmp	.-48     	; 0x60c <vfprintf+0x22>
 63c:	51 2c       	mov	r5, r1
 63e:	31 2c       	mov	r3, r1
 640:	20 e0       	ldi	r18, 0x00	; 0
 642:	20 32       	cpi	r18, 0x20	; 32
 644:	a0 f4       	brcc	.+40     	; 0x66e <vfprintf+0x84>
 646:	8b 32       	cpi	r24, 0x2B	; 43
 648:	69 f0       	breq	.+26     	; 0x664 <vfprintf+0x7a>
 64a:	30 f4       	brcc	.+12     	; 0x658 <vfprintf+0x6e>
 64c:	80 32       	cpi	r24, 0x20	; 32
 64e:	59 f0       	breq	.+22     	; 0x666 <vfprintf+0x7c>
 650:	83 32       	cpi	r24, 0x23	; 35
 652:	69 f4       	brne	.+26     	; 0x66e <vfprintf+0x84>
 654:	20 61       	ori	r18, 0x10	; 16
 656:	2c c0       	rjmp	.+88     	; 0x6b0 <vfprintf+0xc6>
 658:	8d 32       	cpi	r24, 0x2D	; 45
 65a:	39 f0       	breq	.+14     	; 0x66a <vfprintf+0x80>
 65c:	80 33       	cpi	r24, 0x30	; 48
 65e:	39 f4       	brne	.+14     	; 0x66e <vfprintf+0x84>
 660:	21 60       	ori	r18, 0x01	; 1
 662:	26 c0       	rjmp	.+76     	; 0x6b0 <vfprintf+0xc6>
 664:	22 60       	ori	r18, 0x02	; 2
 666:	24 60       	ori	r18, 0x04	; 4
 668:	23 c0       	rjmp	.+70     	; 0x6b0 <vfprintf+0xc6>
 66a:	28 60       	ori	r18, 0x08	; 8
 66c:	21 c0       	rjmp	.+66     	; 0x6b0 <vfprintf+0xc6>
 66e:	27 fd       	sbrc	r18, 7
 670:	27 c0       	rjmp	.+78     	; 0x6c0 <vfprintf+0xd6>
 672:	30 ed       	ldi	r19, 0xD0	; 208
 674:	38 0f       	add	r19, r24
 676:	3a 30       	cpi	r19, 0x0A	; 10
 678:	78 f4       	brcc	.+30     	; 0x698 <vfprintf+0xae>
 67a:	26 ff       	sbrs	r18, 6
 67c:	06 c0       	rjmp	.+12     	; 0x68a <vfprintf+0xa0>
 67e:	fa e0       	ldi	r31, 0x0A	; 10
 680:	5f 9e       	mul	r5, r31
 682:	30 0d       	add	r19, r0
 684:	11 24       	eor	r1, r1
 686:	53 2e       	mov	r5, r19
 688:	13 c0       	rjmp	.+38     	; 0x6b0 <vfprintf+0xc6>
 68a:	8a e0       	ldi	r24, 0x0A	; 10
 68c:	38 9e       	mul	r3, r24
 68e:	30 0d       	add	r19, r0
 690:	11 24       	eor	r1, r1
 692:	33 2e       	mov	r3, r19
 694:	20 62       	ori	r18, 0x20	; 32
 696:	0c c0       	rjmp	.+24     	; 0x6b0 <vfprintf+0xc6>
 698:	8e 32       	cpi	r24, 0x2E	; 46
 69a:	21 f4       	brne	.+8      	; 0x6a4 <vfprintf+0xba>
 69c:	26 fd       	sbrc	r18, 6
 69e:	5f c1       	rjmp	.+702    	; 0x95e <vfprintf+0x374>
 6a0:	20 64       	ori	r18, 0x40	; 64
 6a2:	06 c0       	rjmp	.+12     	; 0x6b0 <vfprintf+0xc6>
 6a4:	8c 36       	cpi	r24, 0x6C	; 108
 6a6:	11 f4       	brne	.+4      	; 0x6ac <vfprintf+0xc2>
 6a8:	20 68       	ori	r18, 0x80	; 128
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <vfprintf+0xc6>
 6ac:	88 36       	cpi	r24, 0x68	; 104
 6ae:	41 f4       	brne	.+16     	; 0x6c0 <vfprintf+0xd6>
 6b0:	f6 01       	movw	r30, r12
 6b2:	93 fd       	sbrc	r25, 3
 6b4:	85 91       	lpm	r24, Z+
 6b6:	93 ff       	sbrs	r25, 3
 6b8:	81 91       	ld	r24, Z+
 6ba:	6f 01       	movw	r12, r30
 6bc:	81 11       	cpse	r24, r1
 6be:	c1 cf       	rjmp	.-126    	; 0x642 <vfprintf+0x58>
 6c0:	98 2f       	mov	r25, r24
 6c2:	9f 7d       	andi	r25, 0xDF	; 223
 6c4:	95 54       	subi	r25, 0x45	; 69
 6c6:	93 30       	cpi	r25, 0x03	; 3
 6c8:	28 f4       	brcc	.+10     	; 0x6d4 <vfprintf+0xea>
 6ca:	0c 5f       	subi	r16, 0xFC	; 252
 6cc:	1f 4f       	sbci	r17, 0xFF	; 255
 6ce:	ff e3       	ldi	r31, 0x3F	; 63
 6d0:	f9 83       	std	Y+1, r31	; 0x01
 6d2:	0d c0       	rjmp	.+26     	; 0x6ee <vfprintf+0x104>
 6d4:	83 36       	cpi	r24, 0x63	; 99
 6d6:	31 f0       	breq	.+12     	; 0x6e4 <vfprintf+0xfa>
 6d8:	83 37       	cpi	r24, 0x73	; 115
 6da:	71 f0       	breq	.+28     	; 0x6f8 <vfprintf+0x10e>
 6dc:	83 35       	cpi	r24, 0x53	; 83
 6de:	09 f0       	breq	.+2      	; 0x6e2 <vfprintf+0xf8>
 6e0:	57 c0       	rjmp	.+174    	; 0x790 <vfprintf+0x1a6>
 6e2:	21 c0       	rjmp	.+66     	; 0x726 <vfprintf+0x13c>
 6e4:	f8 01       	movw	r30, r16
 6e6:	80 81       	ld	r24, Z
 6e8:	89 83       	std	Y+1, r24	; 0x01
 6ea:	0e 5f       	subi	r16, 0xFE	; 254
 6ec:	1f 4f       	sbci	r17, 0xFF	; 255
 6ee:	44 24       	eor	r4, r4
 6f0:	43 94       	inc	r4
 6f2:	51 2c       	mov	r5, r1
 6f4:	54 01       	movw	r10, r8
 6f6:	14 c0       	rjmp	.+40     	; 0x720 <vfprintf+0x136>
 6f8:	38 01       	movw	r6, r16
 6fa:	f2 e0       	ldi	r31, 0x02	; 2
 6fc:	6f 0e       	add	r6, r31
 6fe:	71 1c       	adc	r7, r1
 700:	f8 01       	movw	r30, r16
 702:	a0 80       	ld	r10, Z
 704:	b1 80       	ldd	r11, Z+1	; 0x01
 706:	26 ff       	sbrs	r18, 6
 708:	03 c0       	rjmp	.+6      	; 0x710 <vfprintf+0x126>
 70a:	65 2d       	mov	r22, r5
 70c:	70 e0       	ldi	r23, 0x00	; 0
 70e:	02 c0       	rjmp	.+4      	; 0x714 <vfprintf+0x12a>
 710:	6f ef       	ldi	r22, 0xFF	; 255
 712:	7f ef       	ldi	r23, 0xFF	; 255
 714:	c5 01       	movw	r24, r10
 716:	2c 87       	std	Y+12, r18	; 0x0c
 718:	36 d1       	rcall	.+620    	; 0x986 <strnlen>
 71a:	2c 01       	movw	r4, r24
 71c:	83 01       	movw	r16, r6
 71e:	2c 85       	ldd	r18, Y+12	; 0x0c
 720:	2f 77       	andi	r18, 0x7F	; 127
 722:	22 2e       	mov	r2, r18
 724:	16 c0       	rjmp	.+44     	; 0x752 <vfprintf+0x168>
 726:	38 01       	movw	r6, r16
 728:	f2 e0       	ldi	r31, 0x02	; 2
 72a:	6f 0e       	add	r6, r31
 72c:	71 1c       	adc	r7, r1
 72e:	f8 01       	movw	r30, r16
 730:	a0 80       	ld	r10, Z
 732:	b1 80       	ldd	r11, Z+1	; 0x01
 734:	26 ff       	sbrs	r18, 6
 736:	03 c0       	rjmp	.+6      	; 0x73e <vfprintf+0x154>
 738:	65 2d       	mov	r22, r5
 73a:	70 e0       	ldi	r23, 0x00	; 0
 73c:	02 c0       	rjmp	.+4      	; 0x742 <vfprintf+0x158>
 73e:	6f ef       	ldi	r22, 0xFF	; 255
 740:	7f ef       	ldi	r23, 0xFF	; 255
 742:	c5 01       	movw	r24, r10
 744:	2c 87       	std	Y+12, r18	; 0x0c
 746:	14 d1       	rcall	.+552    	; 0x970 <strnlen_P>
 748:	2c 01       	movw	r4, r24
 74a:	2c 85       	ldd	r18, Y+12	; 0x0c
 74c:	20 68       	ori	r18, 0x80	; 128
 74e:	22 2e       	mov	r2, r18
 750:	83 01       	movw	r16, r6
 752:	23 fc       	sbrc	r2, 3
 754:	19 c0       	rjmp	.+50     	; 0x788 <vfprintf+0x19e>
 756:	83 2d       	mov	r24, r3
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	48 16       	cp	r4, r24
 75c:	59 06       	cpc	r5, r25
 75e:	a0 f4       	brcc	.+40     	; 0x788 <vfprintf+0x19e>
 760:	b7 01       	movw	r22, r14
 762:	80 e2       	ldi	r24, 0x20	; 32
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	1a d1       	rcall	.+564    	; 0x99c <fputc>
 768:	3a 94       	dec	r3
 76a:	f5 cf       	rjmp	.-22     	; 0x756 <vfprintf+0x16c>
 76c:	f5 01       	movw	r30, r10
 76e:	27 fc       	sbrc	r2, 7
 770:	85 91       	lpm	r24, Z+
 772:	27 fe       	sbrs	r2, 7
 774:	81 91       	ld	r24, Z+
 776:	5f 01       	movw	r10, r30
 778:	b7 01       	movw	r22, r14
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	0f d1       	rcall	.+542    	; 0x99c <fputc>
 77e:	31 10       	cpse	r3, r1
 780:	3a 94       	dec	r3
 782:	f1 e0       	ldi	r31, 0x01	; 1
 784:	4f 1a       	sub	r4, r31
 786:	51 08       	sbc	r5, r1
 788:	41 14       	cp	r4, r1
 78a:	51 04       	cpc	r5, r1
 78c:	79 f7       	brne	.-34     	; 0x76c <vfprintf+0x182>
 78e:	de c0       	rjmp	.+444    	; 0x94c <vfprintf+0x362>
 790:	84 36       	cpi	r24, 0x64	; 100
 792:	11 f0       	breq	.+4      	; 0x798 <vfprintf+0x1ae>
 794:	89 36       	cpi	r24, 0x69	; 105
 796:	31 f5       	brne	.+76     	; 0x7e4 <vfprintf+0x1fa>
 798:	f8 01       	movw	r30, r16
 79a:	27 ff       	sbrs	r18, 7
 79c:	07 c0       	rjmp	.+14     	; 0x7ac <vfprintf+0x1c2>
 79e:	60 81       	ld	r22, Z
 7a0:	71 81       	ldd	r23, Z+1	; 0x01
 7a2:	82 81       	ldd	r24, Z+2	; 0x02
 7a4:	93 81       	ldd	r25, Z+3	; 0x03
 7a6:	0c 5f       	subi	r16, 0xFC	; 252
 7a8:	1f 4f       	sbci	r17, 0xFF	; 255
 7aa:	08 c0       	rjmp	.+16     	; 0x7bc <vfprintf+0x1d2>
 7ac:	60 81       	ld	r22, Z
 7ae:	71 81       	ldd	r23, Z+1	; 0x01
 7b0:	07 2e       	mov	r0, r23
 7b2:	00 0c       	add	r0, r0
 7b4:	88 0b       	sbc	r24, r24
 7b6:	99 0b       	sbc	r25, r25
 7b8:	0e 5f       	subi	r16, 0xFE	; 254
 7ba:	1f 4f       	sbci	r17, 0xFF	; 255
 7bc:	2f 76       	andi	r18, 0x6F	; 111
 7be:	72 2e       	mov	r7, r18
 7c0:	97 ff       	sbrs	r25, 7
 7c2:	09 c0       	rjmp	.+18     	; 0x7d6 <vfprintf+0x1ec>
 7c4:	90 95       	com	r25
 7c6:	80 95       	com	r24
 7c8:	70 95       	com	r23
 7ca:	61 95       	neg	r22
 7cc:	7f 4f       	sbci	r23, 0xFF	; 255
 7ce:	8f 4f       	sbci	r24, 0xFF	; 255
 7d0:	9f 4f       	sbci	r25, 0xFF	; 255
 7d2:	20 68       	ori	r18, 0x80	; 128
 7d4:	72 2e       	mov	r7, r18
 7d6:	2a e0       	ldi	r18, 0x0A	; 10
 7d8:	30 e0       	ldi	r19, 0x00	; 0
 7da:	a4 01       	movw	r20, r8
 7dc:	17 d1       	rcall	.+558    	; 0xa0c <__ultoa_invert>
 7de:	a8 2e       	mov	r10, r24
 7e0:	a8 18       	sub	r10, r8
 7e2:	43 c0       	rjmp	.+134    	; 0x86a <vfprintf+0x280>
 7e4:	85 37       	cpi	r24, 0x75	; 117
 7e6:	29 f4       	brne	.+10     	; 0x7f2 <vfprintf+0x208>
 7e8:	2f 7e       	andi	r18, 0xEF	; 239
 7ea:	b2 2e       	mov	r11, r18
 7ec:	2a e0       	ldi	r18, 0x0A	; 10
 7ee:	30 e0       	ldi	r19, 0x00	; 0
 7f0:	25 c0       	rjmp	.+74     	; 0x83c <vfprintf+0x252>
 7f2:	f2 2f       	mov	r31, r18
 7f4:	f9 7f       	andi	r31, 0xF9	; 249
 7f6:	bf 2e       	mov	r11, r31
 7f8:	8f 36       	cpi	r24, 0x6F	; 111
 7fa:	c1 f0       	breq	.+48     	; 0x82c <vfprintf+0x242>
 7fc:	18 f4       	brcc	.+6      	; 0x804 <vfprintf+0x21a>
 7fe:	88 35       	cpi	r24, 0x58	; 88
 800:	79 f0       	breq	.+30     	; 0x820 <vfprintf+0x236>
 802:	ad c0       	rjmp	.+346    	; 0x95e <vfprintf+0x374>
 804:	80 37       	cpi	r24, 0x70	; 112
 806:	19 f0       	breq	.+6      	; 0x80e <vfprintf+0x224>
 808:	88 37       	cpi	r24, 0x78	; 120
 80a:	21 f0       	breq	.+8      	; 0x814 <vfprintf+0x22a>
 80c:	a8 c0       	rjmp	.+336    	; 0x95e <vfprintf+0x374>
 80e:	2f 2f       	mov	r18, r31
 810:	20 61       	ori	r18, 0x10	; 16
 812:	b2 2e       	mov	r11, r18
 814:	b4 fe       	sbrs	r11, 4
 816:	0d c0       	rjmp	.+26     	; 0x832 <vfprintf+0x248>
 818:	8b 2d       	mov	r24, r11
 81a:	84 60       	ori	r24, 0x04	; 4
 81c:	b8 2e       	mov	r11, r24
 81e:	09 c0       	rjmp	.+18     	; 0x832 <vfprintf+0x248>
 820:	24 ff       	sbrs	r18, 4
 822:	0a c0       	rjmp	.+20     	; 0x838 <vfprintf+0x24e>
 824:	9f 2f       	mov	r25, r31
 826:	96 60       	ori	r25, 0x06	; 6
 828:	b9 2e       	mov	r11, r25
 82a:	06 c0       	rjmp	.+12     	; 0x838 <vfprintf+0x24e>
 82c:	28 e0       	ldi	r18, 0x08	; 8
 82e:	30 e0       	ldi	r19, 0x00	; 0
 830:	05 c0       	rjmp	.+10     	; 0x83c <vfprintf+0x252>
 832:	20 e1       	ldi	r18, 0x10	; 16
 834:	30 e0       	ldi	r19, 0x00	; 0
 836:	02 c0       	rjmp	.+4      	; 0x83c <vfprintf+0x252>
 838:	20 e1       	ldi	r18, 0x10	; 16
 83a:	32 e0       	ldi	r19, 0x02	; 2
 83c:	f8 01       	movw	r30, r16
 83e:	b7 fe       	sbrs	r11, 7
 840:	07 c0       	rjmp	.+14     	; 0x850 <vfprintf+0x266>
 842:	60 81       	ld	r22, Z
 844:	71 81       	ldd	r23, Z+1	; 0x01
 846:	82 81       	ldd	r24, Z+2	; 0x02
 848:	93 81       	ldd	r25, Z+3	; 0x03
 84a:	0c 5f       	subi	r16, 0xFC	; 252
 84c:	1f 4f       	sbci	r17, 0xFF	; 255
 84e:	06 c0       	rjmp	.+12     	; 0x85c <vfprintf+0x272>
 850:	60 81       	ld	r22, Z
 852:	71 81       	ldd	r23, Z+1	; 0x01
 854:	80 e0       	ldi	r24, 0x00	; 0
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	0e 5f       	subi	r16, 0xFE	; 254
 85a:	1f 4f       	sbci	r17, 0xFF	; 255
 85c:	a4 01       	movw	r20, r8
 85e:	d6 d0       	rcall	.+428    	; 0xa0c <__ultoa_invert>
 860:	a8 2e       	mov	r10, r24
 862:	a8 18       	sub	r10, r8
 864:	fb 2d       	mov	r31, r11
 866:	ff 77       	andi	r31, 0x7F	; 127
 868:	7f 2e       	mov	r7, r31
 86a:	76 fe       	sbrs	r7, 6
 86c:	0b c0       	rjmp	.+22     	; 0x884 <vfprintf+0x29a>
 86e:	37 2d       	mov	r19, r7
 870:	3e 7f       	andi	r19, 0xFE	; 254
 872:	a5 14       	cp	r10, r5
 874:	50 f4       	brcc	.+20     	; 0x88a <vfprintf+0x2a0>
 876:	74 fe       	sbrs	r7, 4
 878:	0a c0       	rjmp	.+20     	; 0x88e <vfprintf+0x2a4>
 87a:	72 fc       	sbrc	r7, 2
 87c:	08 c0       	rjmp	.+16     	; 0x88e <vfprintf+0x2a4>
 87e:	37 2d       	mov	r19, r7
 880:	3e 7e       	andi	r19, 0xEE	; 238
 882:	05 c0       	rjmp	.+10     	; 0x88e <vfprintf+0x2a4>
 884:	ba 2c       	mov	r11, r10
 886:	37 2d       	mov	r19, r7
 888:	03 c0       	rjmp	.+6      	; 0x890 <vfprintf+0x2a6>
 88a:	ba 2c       	mov	r11, r10
 88c:	01 c0       	rjmp	.+2      	; 0x890 <vfprintf+0x2a6>
 88e:	b5 2c       	mov	r11, r5
 890:	34 ff       	sbrs	r19, 4
 892:	0d c0       	rjmp	.+26     	; 0x8ae <vfprintf+0x2c4>
 894:	fe 01       	movw	r30, r28
 896:	ea 0d       	add	r30, r10
 898:	f1 1d       	adc	r31, r1
 89a:	80 81       	ld	r24, Z
 89c:	80 33       	cpi	r24, 0x30	; 48
 89e:	11 f4       	brne	.+4      	; 0x8a4 <vfprintf+0x2ba>
 8a0:	39 7e       	andi	r19, 0xE9	; 233
 8a2:	09 c0       	rjmp	.+18     	; 0x8b6 <vfprintf+0x2cc>
 8a4:	32 ff       	sbrs	r19, 2
 8a6:	06 c0       	rjmp	.+12     	; 0x8b4 <vfprintf+0x2ca>
 8a8:	b3 94       	inc	r11
 8aa:	b3 94       	inc	r11
 8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <vfprintf+0x2cc>
 8ae:	83 2f       	mov	r24, r19
 8b0:	86 78       	andi	r24, 0x86	; 134
 8b2:	09 f0       	breq	.+2      	; 0x8b6 <vfprintf+0x2cc>
 8b4:	b3 94       	inc	r11
 8b6:	33 fd       	sbrc	r19, 3
 8b8:	12 c0       	rjmp	.+36     	; 0x8de <vfprintf+0x2f4>
 8ba:	30 ff       	sbrs	r19, 0
 8bc:	06 c0       	rjmp	.+12     	; 0x8ca <vfprintf+0x2e0>
 8be:	5a 2c       	mov	r5, r10
 8c0:	b3 14       	cp	r11, r3
 8c2:	18 f4       	brcc	.+6      	; 0x8ca <vfprintf+0x2e0>
 8c4:	53 0c       	add	r5, r3
 8c6:	5b 18       	sub	r5, r11
 8c8:	b3 2c       	mov	r11, r3
 8ca:	b3 14       	cp	r11, r3
 8cc:	60 f4       	brcc	.+24     	; 0x8e6 <vfprintf+0x2fc>
 8ce:	b7 01       	movw	r22, r14
 8d0:	80 e2       	ldi	r24, 0x20	; 32
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	3c 87       	std	Y+12, r19	; 0x0c
 8d6:	62 d0       	rcall	.+196    	; 0x99c <fputc>
 8d8:	b3 94       	inc	r11
 8da:	3c 85       	ldd	r19, Y+12	; 0x0c
 8dc:	f6 cf       	rjmp	.-20     	; 0x8ca <vfprintf+0x2e0>
 8de:	b3 14       	cp	r11, r3
 8e0:	10 f4       	brcc	.+4      	; 0x8e6 <vfprintf+0x2fc>
 8e2:	3b 18       	sub	r3, r11
 8e4:	01 c0       	rjmp	.+2      	; 0x8e8 <vfprintf+0x2fe>
 8e6:	31 2c       	mov	r3, r1
 8e8:	34 ff       	sbrs	r19, 4
 8ea:	11 c0       	rjmp	.+34     	; 0x90e <vfprintf+0x324>
 8ec:	b7 01       	movw	r22, r14
 8ee:	80 e3       	ldi	r24, 0x30	; 48
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	3c 87       	std	Y+12, r19	; 0x0c
 8f4:	53 d0       	rcall	.+166    	; 0x99c <fputc>
 8f6:	3c 85       	ldd	r19, Y+12	; 0x0c
 8f8:	32 ff       	sbrs	r19, 2
 8fa:	16 c0       	rjmp	.+44     	; 0x928 <vfprintf+0x33e>
 8fc:	31 fd       	sbrc	r19, 1
 8fe:	03 c0       	rjmp	.+6      	; 0x906 <vfprintf+0x31c>
 900:	88 e7       	ldi	r24, 0x78	; 120
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	02 c0       	rjmp	.+4      	; 0x90a <vfprintf+0x320>
 906:	88 e5       	ldi	r24, 0x58	; 88
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	b7 01       	movw	r22, r14
 90c:	0c c0       	rjmp	.+24     	; 0x926 <vfprintf+0x33c>
 90e:	83 2f       	mov	r24, r19
 910:	86 78       	andi	r24, 0x86	; 134
 912:	51 f0       	breq	.+20     	; 0x928 <vfprintf+0x33e>
 914:	31 ff       	sbrs	r19, 1
 916:	02 c0       	rjmp	.+4      	; 0x91c <vfprintf+0x332>
 918:	8b e2       	ldi	r24, 0x2B	; 43
 91a:	01 c0       	rjmp	.+2      	; 0x91e <vfprintf+0x334>
 91c:	80 e2       	ldi	r24, 0x20	; 32
 91e:	37 fd       	sbrc	r19, 7
 920:	8d e2       	ldi	r24, 0x2D	; 45
 922:	b7 01       	movw	r22, r14
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	3a d0       	rcall	.+116    	; 0x99c <fputc>
 928:	a5 14       	cp	r10, r5
 92a:	30 f4       	brcc	.+12     	; 0x938 <vfprintf+0x34e>
 92c:	b7 01       	movw	r22, r14
 92e:	80 e3       	ldi	r24, 0x30	; 48
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	34 d0       	rcall	.+104    	; 0x99c <fputc>
 934:	5a 94       	dec	r5
 936:	f8 cf       	rjmp	.-16     	; 0x928 <vfprintf+0x33e>
 938:	aa 94       	dec	r10
 93a:	f4 01       	movw	r30, r8
 93c:	ea 0d       	add	r30, r10
 93e:	f1 1d       	adc	r31, r1
 940:	80 81       	ld	r24, Z
 942:	b7 01       	movw	r22, r14
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	2a d0       	rcall	.+84     	; 0x99c <fputc>
 948:	a1 10       	cpse	r10, r1
 94a:	f6 cf       	rjmp	.-20     	; 0x938 <vfprintf+0x34e>
 94c:	33 20       	and	r3, r3
 94e:	09 f4       	brne	.+2      	; 0x952 <vfprintf+0x368>
 950:	5d ce       	rjmp	.-838    	; 0x60c <vfprintf+0x22>
 952:	b7 01       	movw	r22, r14
 954:	80 e2       	ldi	r24, 0x20	; 32
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	21 d0       	rcall	.+66     	; 0x99c <fputc>
 95a:	3a 94       	dec	r3
 95c:	f7 cf       	rjmp	.-18     	; 0x94c <vfprintf+0x362>
 95e:	f7 01       	movw	r30, r14
 960:	86 81       	ldd	r24, Z+6	; 0x06
 962:	97 81       	ldd	r25, Z+7	; 0x07
 964:	02 c0       	rjmp	.+4      	; 0x96a <vfprintf+0x380>
 966:	8f ef       	ldi	r24, 0xFF	; 255
 968:	9f ef       	ldi	r25, 0xFF	; 255
 96a:	2c 96       	adiw	r28, 0x0c	; 12
 96c:	e2 e1       	ldi	r30, 0x12	; 18
 96e:	f4 c0       	rjmp	.+488    	; 0xb58 <__epilogue_restores__>

00000970 <strnlen_P>:
 970:	fc 01       	movw	r30, r24
 972:	05 90       	lpm	r0, Z+
 974:	61 50       	subi	r22, 0x01	; 1
 976:	70 40       	sbci	r23, 0x00	; 0
 978:	01 10       	cpse	r0, r1
 97a:	d8 f7       	brcc	.-10     	; 0x972 <strnlen_P+0x2>
 97c:	80 95       	com	r24
 97e:	90 95       	com	r25
 980:	8e 0f       	add	r24, r30
 982:	9f 1f       	adc	r25, r31
 984:	08 95       	ret

00000986 <strnlen>:
 986:	fc 01       	movw	r30, r24
 988:	61 50       	subi	r22, 0x01	; 1
 98a:	70 40       	sbci	r23, 0x00	; 0
 98c:	01 90       	ld	r0, Z+
 98e:	01 10       	cpse	r0, r1
 990:	d8 f7       	brcc	.-10     	; 0x988 <strnlen+0x2>
 992:	80 95       	com	r24
 994:	90 95       	com	r25
 996:	8e 0f       	add	r24, r30
 998:	9f 1f       	adc	r25, r31
 99a:	08 95       	ret

0000099c <fputc>:
 99c:	0f 93       	push	r16
 99e:	1f 93       	push	r17
 9a0:	cf 93       	push	r28
 9a2:	df 93       	push	r29
 9a4:	fb 01       	movw	r30, r22
 9a6:	23 81       	ldd	r18, Z+3	; 0x03
 9a8:	21 fd       	sbrc	r18, 1
 9aa:	03 c0       	rjmp	.+6      	; 0x9b2 <fputc+0x16>
 9ac:	8f ef       	ldi	r24, 0xFF	; 255
 9ae:	9f ef       	ldi	r25, 0xFF	; 255
 9b0:	28 c0       	rjmp	.+80     	; 0xa02 <fputc+0x66>
 9b2:	22 ff       	sbrs	r18, 2
 9b4:	16 c0       	rjmp	.+44     	; 0x9e2 <fputc+0x46>
 9b6:	46 81       	ldd	r20, Z+6	; 0x06
 9b8:	57 81       	ldd	r21, Z+7	; 0x07
 9ba:	24 81       	ldd	r18, Z+4	; 0x04
 9bc:	35 81       	ldd	r19, Z+5	; 0x05
 9be:	42 17       	cp	r20, r18
 9c0:	53 07       	cpc	r21, r19
 9c2:	44 f4       	brge	.+16     	; 0x9d4 <fputc+0x38>
 9c4:	a0 81       	ld	r26, Z
 9c6:	b1 81       	ldd	r27, Z+1	; 0x01
 9c8:	9d 01       	movw	r18, r26
 9ca:	2f 5f       	subi	r18, 0xFF	; 255
 9cc:	3f 4f       	sbci	r19, 0xFF	; 255
 9ce:	31 83       	std	Z+1, r19	; 0x01
 9d0:	20 83       	st	Z, r18
 9d2:	8c 93       	st	X, r24
 9d4:	26 81       	ldd	r18, Z+6	; 0x06
 9d6:	37 81       	ldd	r19, Z+7	; 0x07
 9d8:	2f 5f       	subi	r18, 0xFF	; 255
 9da:	3f 4f       	sbci	r19, 0xFF	; 255
 9dc:	37 83       	std	Z+7, r19	; 0x07
 9de:	26 83       	std	Z+6, r18	; 0x06
 9e0:	10 c0       	rjmp	.+32     	; 0xa02 <fputc+0x66>
 9e2:	eb 01       	movw	r28, r22
 9e4:	09 2f       	mov	r16, r25
 9e6:	18 2f       	mov	r17, r24
 9e8:	00 84       	ldd	r0, Z+8	; 0x08
 9ea:	f1 85       	ldd	r31, Z+9	; 0x09
 9ec:	e0 2d       	mov	r30, r0
 9ee:	09 95       	icall
 9f0:	89 2b       	or	r24, r25
 9f2:	e1 f6       	brne	.-72     	; 0x9ac <fputc+0x10>
 9f4:	8e 81       	ldd	r24, Y+6	; 0x06
 9f6:	9f 81       	ldd	r25, Y+7	; 0x07
 9f8:	01 96       	adiw	r24, 0x01	; 1
 9fa:	9f 83       	std	Y+7, r25	; 0x07
 9fc:	8e 83       	std	Y+6, r24	; 0x06
 9fe:	81 2f       	mov	r24, r17
 a00:	90 2f       	mov	r25, r16
 a02:	df 91       	pop	r29
 a04:	cf 91       	pop	r28
 a06:	1f 91       	pop	r17
 a08:	0f 91       	pop	r16
 a0a:	08 95       	ret

00000a0c <__ultoa_invert>:
 a0c:	fa 01       	movw	r30, r20
 a0e:	aa 27       	eor	r26, r26
 a10:	28 30       	cpi	r18, 0x08	; 8
 a12:	51 f1       	breq	.+84     	; 0xa68 <__ultoa_invert+0x5c>
 a14:	20 31       	cpi	r18, 0x10	; 16
 a16:	81 f1       	breq	.+96     	; 0xa78 <__ultoa_invert+0x6c>
 a18:	e8 94       	clt
 a1a:	6f 93       	push	r22
 a1c:	6e 7f       	andi	r22, 0xFE	; 254
 a1e:	6e 5f       	subi	r22, 0xFE	; 254
 a20:	7f 4f       	sbci	r23, 0xFF	; 255
 a22:	8f 4f       	sbci	r24, 0xFF	; 255
 a24:	9f 4f       	sbci	r25, 0xFF	; 255
 a26:	af 4f       	sbci	r26, 0xFF	; 255
 a28:	b1 e0       	ldi	r27, 0x01	; 1
 a2a:	3e d0       	rcall	.+124    	; 0xaa8 <__ultoa_invert+0x9c>
 a2c:	b4 e0       	ldi	r27, 0x04	; 4
 a2e:	3c d0       	rcall	.+120    	; 0xaa8 <__ultoa_invert+0x9c>
 a30:	67 0f       	add	r22, r23
 a32:	78 1f       	adc	r23, r24
 a34:	89 1f       	adc	r24, r25
 a36:	9a 1f       	adc	r25, r26
 a38:	a1 1d       	adc	r26, r1
 a3a:	68 0f       	add	r22, r24
 a3c:	79 1f       	adc	r23, r25
 a3e:	8a 1f       	adc	r24, r26
 a40:	91 1d       	adc	r25, r1
 a42:	a1 1d       	adc	r26, r1
 a44:	6a 0f       	add	r22, r26
 a46:	71 1d       	adc	r23, r1
 a48:	81 1d       	adc	r24, r1
 a4a:	91 1d       	adc	r25, r1
 a4c:	a1 1d       	adc	r26, r1
 a4e:	20 d0       	rcall	.+64     	; 0xa90 <__ultoa_invert+0x84>
 a50:	09 f4       	brne	.+2      	; 0xa54 <__ultoa_invert+0x48>
 a52:	68 94       	set
 a54:	3f 91       	pop	r19
 a56:	2a e0       	ldi	r18, 0x0A	; 10
 a58:	26 9f       	mul	r18, r22
 a5a:	11 24       	eor	r1, r1
 a5c:	30 19       	sub	r19, r0
 a5e:	30 5d       	subi	r19, 0xD0	; 208
 a60:	31 93       	st	Z+, r19
 a62:	de f6       	brtc	.-74     	; 0xa1a <__ultoa_invert+0xe>
 a64:	cf 01       	movw	r24, r30
 a66:	08 95       	ret
 a68:	46 2f       	mov	r20, r22
 a6a:	47 70       	andi	r20, 0x07	; 7
 a6c:	40 5d       	subi	r20, 0xD0	; 208
 a6e:	41 93       	st	Z+, r20
 a70:	b3 e0       	ldi	r27, 0x03	; 3
 a72:	0f d0       	rcall	.+30     	; 0xa92 <__ultoa_invert+0x86>
 a74:	c9 f7       	brne	.-14     	; 0xa68 <__ultoa_invert+0x5c>
 a76:	f6 cf       	rjmp	.-20     	; 0xa64 <__ultoa_invert+0x58>
 a78:	46 2f       	mov	r20, r22
 a7a:	4f 70       	andi	r20, 0x0F	; 15
 a7c:	40 5d       	subi	r20, 0xD0	; 208
 a7e:	4a 33       	cpi	r20, 0x3A	; 58
 a80:	18 f0       	brcs	.+6      	; 0xa88 <__ultoa_invert+0x7c>
 a82:	49 5d       	subi	r20, 0xD9	; 217
 a84:	31 fd       	sbrc	r19, 1
 a86:	40 52       	subi	r20, 0x20	; 32
 a88:	41 93       	st	Z+, r20
 a8a:	02 d0       	rcall	.+4      	; 0xa90 <__ultoa_invert+0x84>
 a8c:	a9 f7       	brne	.-22     	; 0xa78 <__ultoa_invert+0x6c>
 a8e:	ea cf       	rjmp	.-44     	; 0xa64 <__ultoa_invert+0x58>
 a90:	b4 e0       	ldi	r27, 0x04	; 4
 a92:	a6 95       	lsr	r26
 a94:	97 95       	ror	r25
 a96:	87 95       	ror	r24
 a98:	77 95       	ror	r23
 a9a:	67 95       	ror	r22
 a9c:	ba 95       	dec	r27
 a9e:	c9 f7       	brne	.-14     	; 0xa92 <__ultoa_invert+0x86>
 aa0:	00 97       	sbiw	r24, 0x00	; 0
 aa2:	61 05       	cpc	r22, r1
 aa4:	71 05       	cpc	r23, r1
 aa6:	08 95       	ret
 aa8:	9b 01       	movw	r18, r22
 aaa:	ac 01       	movw	r20, r24
 aac:	0a 2e       	mov	r0, r26
 aae:	06 94       	lsr	r0
 ab0:	57 95       	ror	r21
 ab2:	47 95       	ror	r20
 ab4:	37 95       	ror	r19
 ab6:	27 95       	ror	r18
 ab8:	ba 95       	dec	r27
 aba:	c9 f7       	brne	.-14     	; 0xaae <__ultoa_invert+0xa2>
 abc:	62 0f       	add	r22, r18
 abe:	73 1f       	adc	r23, r19
 ac0:	84 1f       	adc	r24, r20
 ac2:	95 1f       	adc	r25, r21
 ac4:	a0 1d       	adc	r26, r0
 ac6:	08 95       	ret

00000ac8 <__divmodsi4>:
 ac8:	05 2e       	mov	r0, r21
 aca:	97 fb       	bst	r25, 7
 acc:	16 f4       	brtc	.+4      	; 0xad2 <__divmodsi4+0xa>
 ace:	00 94       	com	r0
 ad0:	0f d0       	rcall	.+30     	; 0xaf0 <__negsi2>
 ad2:	57 fd       	sbrc	r21, 7
 ad4:	05 d0       	rcall	.+10     	; 0xae0 <__divmodsi4_neg2>
 ad6:	5b d0       	rcall	.+182    	; 0xb8e <__udivmodsi4>
 ad8:	07 fc       	sbrc	r0, 7
 ada:	02 d0       	rcall	.+4      	; 0xae0 <__divmodsi4_neg2>
 adc:	46 f4       	brtc	.+16     	; 0xaee <__divmodsi4_exit>
 ade:	08 c0       	rjmp	.+16     	; 0xaf0 <__negsi2>

00000ae0 <__divmodsi4_neg2>:
 ae0:	50 95       	com	r21
 ae2:	40 95       	com	r20
 ae4:	30 95       	com	r19
 ae6:	21 95       	neg	r18
 ae8:	3f 4f       	sbci	r19, 0xFF	; 255
 aea:	4f 4f       	sbci	r20, 0xFF	; 255
 aec:	5f 4f       	sbci	r21, 0xFF	; 255

00000aee <__divmodsi4_exit>:
 aee:	08 95       	ret

00000af0 <__negsi2>:
 af0:	90 95       	com	r25
 af2:	80 95       	com	r24
 af4:	70 95       	com	r23
 af6:	61 95       	neg	r22
 af8:	7f 4f       	sbci	r23, 0xFF	; 255
 afa:	8f 4f       	sbci	r24, 0xFF	; 255
 afc:	9f 4f       	sbci	r25, 0xFF	; 255
 afe:	08 95       	ret

00000b00 <__muluhisi3>:
 b00:	68 d0       	rcall	.+208    	; 0xbd2 <__umulhisi3>
 b02:	a5 9f       	mul	r26, r21
 b04:	90 0d       	add	r25, r0
 b06:	b4 9f       	mul	r27, r20
 b08:	90 0d       	add	r25, r0
 b0a:	a4 9f       	mul	r26, r20
 b0c:	80 0d       	add	r24, r0
 b0e:	91 1d       	adc	r25, r1
 b10:	11 24       	eor	r1, r1
 b12:	08 95       	ret

00000b14 <__mulshisi3>:
 b14:	b7 ff       	sbrs	r27, 7
 b16:	f4 cf       	rjmp	.-24     	; 0xb00 <__muluhisi3>

00000b18 <__mulohisi3>:
 b18:	f3 df       	rcall	.-26     	; 0xb00 <__muluhisi3>
 b1a:	82 1b       	sub	r24, r18
 b1c:	93 0b       	sbc	r25, r19
 b1e:	08 95       	ret

00000b20 <__prologue_saves__>:
 b20:	2f 92       	push	r2
 b22:	3f 92       	push	r3
 b24:	4f 92       	push	r4
 b26:	5f 92       	push	r5
 b28:	6f 92       	push	r6
 b2a:	7f 92       	push	r7
 b2c:	8f 92       	push	r8
 b2e:	9f 92       	push	r9
 b30:	af 92       	push	r10
 b32:	bf 92       	push	r11
 b34:	cf 92       	push	r12
 b36:	df 92       	push	r13
 b38:	ef 92       	push	r14
 b3a:	ff 92       	push	r15
 b3c:	0f 93       	push	r16
 b3e:	1f 93       	push	r17
 b40:	cf 93       	push	r28
 b42:	df 93       	push	r29
 b44:	cd b7       	in	r28, 0x3d	; 61
 b46:	de b7       	in	r29, 0x3e	; 62
 b48:	ca 1b       	sub	r28, r26
 b4a:	db 0b       	sbc	r29, r27
 b4c:	0f b6       	in	r0, 0x3f	; 63
 b4e:	f8 94       	cli
 b50:	de bf       	out	0x3e, r29	; 62
 b52:	0f be       	out	0x3f, r0	; 63
 b54:	cd bf       	out	0x3d, r28	; 61
 b56:	09 94       	ijmp

00000b58 <__epilogue_restores__>:
 b58:	2a 88       	ldd	r2, Y+18	; 0x12
 b5a:	39 88       	ldd	r3, Y+17	; 0x11
 b5c:	48 88       	ldd	r4, Y+16	; 0x10
 b5e:	5f 84       	ldd	r5, Y+15	; 0x0f
 b60:	6e 84       	ldd	r6, Y+14	; 0x0e
 b62:	7d 84       	ldd	r7, Y+13	; 0x0d
 b64:	8c 84       	ldd	r8, Y+12	; 0x0c
 b66:	9b 84       	ldd	r9, Y+11	; 0x0b
 b68:	aa 84       	ldd	r10, Y+10	; 0x0a
 b6a:	b9 84       	ldd	r11, Y+9	; 0x09
 b6c:	c8 84       	ldd	r12, Y+8	; 0x08
 b6e:	df 80       	ldd	r13, Y+7	; 0x07
 b70:	ee 80       	ldd	r14, Y+6	; 0x06
 b72:	fd 80       	ldd	r15, Y+5	; 0x05
 b74:	0c 81       	ldd	r16, Y+4	; 0x04
 b76:	1b 81       	ldd	r17, Y+3	; 0x03
 b78:	aa 81       	ldd	r26, Y+2	; 0x02
 b7a:	b9 81       	ldd	r27, Y+1	; 0x01
 b7c:	ce 0f       	add	r28, r30
 b7e:	d1 1d       	adc	r29, r1
 b80:	0f b6       	in	r0, 0x3f	; 63
 b82:	f8 94       	cli
 b84:	de bf       	out	0x3e, r29	; 62
 b86:	0f be       	out	0x3f, r0	; 63
 b88:	cd bf       	out	0x3d, r28	; 61
 b8a:	ed 01       	movw	r28, r26
 b8c:	08 95       	ret

00000b8e <__udivmodsi4>:
 b8e:	a1 e2       	ldi	r26, 0x21	; 33
 b90:	1a 2e       	mov	r1, r26
 b92:	aa 1b       	sub	r26, r26
 b94:	bb 1b       	sub	r27, r27
 b96:	fd 01       	movw	r30, r26
 b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__udivmodsi4_ep>

00000b9a <__udivmodsi4_loop>:
 b9a:	aa 1f       	adc	r26, r26
 b9c:	bb 1f       	adc	r27, r27
 b9e:	ee 1f       	adc	r30, r30
 ba0:	ff 1f       	adc	r31, r31
 ba2:	a2 17       	cp	r26, r18
 ba4:	b3 07       	cpc	r27, r19
 ba6:	e4 07       	cpc	r30, r20
 ba8:	f5 07       	cpc	r31, r21
 baa:	20 f0       	brcs	.+8      	; 0xbb4 <__udivmodsi4_ep>
 bac:	a2 1b       	sub	r26, r18
 bae:	b3 0b       	sbc	r27, r19
 bb0:	e4 0b       	sbc	r30, r20
 bb2:	f5 0b       	sbc	r31, r21

00000bb4 <__udivmodsi4_ep>:
 bb4:	66 1f       	adc	r22, r22
 bb6:	77 1f       	adc	r23, r23
 bb8:	88 1f       	adc	r24, r24
 bba:	99 1f       	adc	r25, r25
 bbc:	1a 94       	dec	r1
 bbe:	69 f7       	brne	.-38     	; 0xb9a <__udivmodsi4_loop>
 bc0:	60 95       	com	r22
 bc2:	70 95       	com	r23
 bc4:	80 95       	com	r24
 bc6:	90 95       	com	r25
 bc8:	9b 01       	movw	r18, r22
 bca:	ac 01       	movw	r20, r24
 bcc:	bd 01       	movw	r22, r26
 bce:	cf 01       	movw	r24, r30
 bd0:	08 95       	ret

00000bd2 <__umulhisi3>:
 bd2:	a2 9f       	mul	r26, r18
 bd4:	b0 01       	movw	r22, r0
 bd6:	b3 9f       	mul	r27, r19
 bd8:	c0 01       	movw	r24, r0
 bda:	a3 9f       	mul	r26, r19
 bdc:	01 d0       	rcall	.+2      	; 0xbe0 <__umulhisi3+0xe>
 bde:	b2 9f       	mul	r27, r18
 be0:	70 0d       	add	r23, r0
 be2:	81 1d       	adc	r24, r1
 be4:	11 24       	eor	r1, r1
 be6:	91 1d       	adc	r25, r1
 be8:	08 95       	ret

00000bea <_exit>:
 bea:	f8 94       	cli

00000bec <__stop_program>:
 bec:	ff cf       	rjmp	.-2      	; 0xbec <__stop_program>
